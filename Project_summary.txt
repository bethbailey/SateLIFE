Group Name: SateLIFE
Team members: Jo Denby, Cooper Nederhood, Beth Bailey, Laurence Warner
Code contributors: Jo Denby, Cooper Nederhood, Beth Bailey

############################################################
HYPOTHESES: to fill in

############################################################
DATA:
	For our analysis we relied on publicly available satellite imagery obtained and pre-processed through the Google Earth Engine (EE) platform, a satellite imagery and geo-spatial analysis platform from Google.

	RAW DATA:
		- satellite imagery is a rich form of data with different satellites gathering different information, called bands. We utilized the following data types/bands:

		Landsat 7
			- 30m resolution
			- Cleaned yearly composites from 2000-2012
			- 3 band RGB (red-green-blue) which yields a traditional image of the area of interest, as it appears to an observer

		LST
			- 1km resolution
			- Cleaned yearly composite from 2000-2012
			- 1 band quantifying the land surface temperature of the area of interest

		NDVI
			- 30m resolution
			- Cleaned yearly composites from 2000-2012
			- 1 band, Normalized Difference Vegetation Index, essentially captures the 'greenness' of the land below. This is a measure of the vegetation

		Night_lights
			- 1km resolution
			- Cleaned yearly composites from 2000-2012
			- 1 band, a measure of the average nightime luminosity of the area of interest. This has been shown to be correlated with economic activity and has been widely used as a proxy for economic activity within the development literature

		Geojson
			- Not obtained through Google but through OpenStreetMaps, a crowd-source mapping platform
			- .gpx files (geojson type) containing GPS coordinates describing polygons of the neighborhood boundaries within the city of Kinshasa
			- Described in greater detail in "Getting boundaries" below

		Boundaries:
			- Exported through Google EE, although the raw data source is entirely Geojson and hand-drawn polygons
			- Built through Google EE and exported to be consistent with Landsat 7, LST, NDVI, and Night_lights data described above.
			- Described in greater detail in "Getting boundaries" below


	CLEANING & EXPORTING SATELLITE IMAGERY:

	Raw satellite imagery can be extremely noisy with missingness due to cloud cover, distortions caused when the satellite passes over different areas of the Earth at different times, etc. We utilized the Google EE code editor platform to perform cleaning and rectifying (fitting satellite images together into a clean composite). The EE code editor is written in javascript syntax. The script "geeimage.js" is our script for downloading, processing, and exporting the massive files to Google Drive.

	Google EE exports all images as .tiff files, which we then load into Python as numpy arrays. A particular challenge when using any geospatial data is to have the data aligned geographically, so that each pixel within the numpy arrays corresponds to the same geographic location in another .tiff file. Again, we utilized Google EE to ensure the geographic alignment of our raw data


	GETTING BOUNDARIES:

	In addition to making statements about the Kinshasa-Brazzaville area, we wanted to make finer-grained statements comparing the two countries, the two-cities, the river between, the city neighborhoods, etc. This required combining the spatial satellite data with GPS indexed boundary data.

	OpenStreetMaps, as part of project to map the Democratic Republic of the Congo, provides GPS coordinate data in the form of .gpx (geojson) files which define neighborhoods within Kinshasa. The script "clean_gps.py" parses the .gpx files. However, to be compatible the GPS data needs to be processed through Google EE. Thus, the "clean_gps.py" takes the parsed .gpx files and outputs a .txt file of EE compatible code which builds a tiff image containing the gps boundaries. This txt file is then the foundation for the script "kinshasa_boundaries.js"

	Google EE has two image types: raster and feature. The images describe above are rasters and the GPS boundaries are feature types. Again, using EE we convert the GPS boundaries from feature types into raster/image types for compatibility. We also manually draw boundaries where GPS data is not available from OpenStreetMaps. The boundary analsysis is layered, with different codes denoting country differences and different areas within country. Thus, the analysis in EE yields 3 boundary tiff files which are then composited into 1 comprehensive boundary file. This occurs in the "clean_boundaries.py" script

	CLASS DESIGN:

	As described in the comments and header of the "util.py" file, the SatData class facilitates the construction and analysis of the satellite tiff image files. 

	